{
  "name": "unoconv",
  "version": "0.1.2",
  "description": "Wrapper for converting documents with unoconv.",
  "homepage": "https://github.com/gfloyd/node-unoconv",
  "author": {
    "name": "Graham Floyd",
    "email": "grahamf@gmail.com"
  },
  "main": "./index",
  "repository": {
    "type": "git",
    "url": "https://github.com/gfloyd/node-unoconv.git"
  },
  "keywords": [
    "unoconv",
    "document",
    "conversion"
  ],
  "dependencies": {
    "underscore": "1.4.x",
    "mime": "1.2.x"
  },
  "license": "MIT",
  "readme": "# node-unoconv\n\nA node.js wrapper for converting documents with [unoconv](http://dag.wieers.com/home-made/unoconv/).\n\n## Requirements\n\n[Unoconv](http://dag.wieers.com/home-made/unoconv/) is required, which requires [LibreOffice](http://www.libreoffice.org/) (or OpenOffice.)\n\n## Install\n\nInstall with:\n\n    npm install unoconv\n\n## Converting documents\n\n\tvar unoconv = require('unoconv');\n\n\tunoconv.convert('document.docx', 'pdf', function (err, result) {\n\t\t// result is returned as a Buffer\n\t\tfs.writeFile('converted.pdf', result);\n\t});\n\n## Starting a listener\n\nYou can also start a unoconv listener to avoid launching Libre/OpenOffice on every conversion:\n\n\tunoconv.listen();\n\n## API\n\n### unoconv.convert(file, outputFormat, [options], callback)\n\nConverts `file` to the specified `outputFormat`. `options` is an object with the following properties:\n\n* `bin` Path to the unoconv binary\n* `port` Unoconv listener port to connect to\n\n`callback` gets the arguments `err` and `result`. `result` is returned as a Buffer object.\n\n\n### unoconv.listen([options])\n\nStarts a new unoconv listener. `options` accepts the same parameters as `convert()`.\n\nReturns a `ChildProcess` object. You can handle errors by listening to the `stderr` property:\n\n\tvar listener = unoconv.listen({ port: 2002 });\n\n\tlistener.stderr.on('data', function (data) {\n\t\tconsole.log('stderr: ' + data.toString('utf8'));\n\t});\n\n### unoconv.detectSupportedFormats([options], callback)\n\nThis function parses the output of `unoconv --show` to attempt to detect supported output formats.\n\n`options` is an object with the following properties:\n\n* `bin` Path to the unoconv binary\n\n`callback` gets the arguments `err` and `result`. `result` is an object containing a collection of supported document types and output formats.\n\n",
  "readmeFilename": "README.md",
  "_id": "unoconv@0.1.2",
  "dist": {
    "shasum": "0ecd62b2fadc5d6dbfe178c30fe519151577817b",
    "tarball": "http://registry.npmjs.org/unoconv/-/unoconv-0.1.2.tgz"
  },
  "_npmVersion": "1.1.65",
  "_npmUser": {
    "name": "gfloyd",
    "email": "grahamf@gmail.com"
  },
  "maintainers": [
    {
      "name": "gfloyd",
      "email": "grahamf@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "0ecd62b2fadc5d6dbfe178c30fe519151577817b",
  "_from": "unoconv@*",
  "_resolved": "https://registry.npmjs.org/unoconv/-/unoconv-0.1.2.tgz",
  "bugs": {
    "url": "https://github.com/gfloyd/node-unoconv/issues"
  }
}
